<?xml version="1.0" encoding="UTF-8"?>

<!-- scan ：开启"热更新" scanPeriod："热更新"扫描周期，默认 60 seconds(60秒)-->
<configuration scan="true" scanPeriod="300 seconds">

    <!-- 引入颜色转换器 -->
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter"/>

    <!-- 自定义变量  name ：变量名   scope ： 在哪个环境中查找 source ： 使用哪个属性 defaultValue ：没找到时的默认值-->
    <springProperty name="env" scope="context" source="spring.profiles.active" defaultValue="env"/>

    <!-- 自定义变量，用于配置日志输出格式，这个格式是尽量偏向 spring boot 默认的输出风格
    %date：日期，默认格式 yyyy-MM-dd hhh:mm:ss,SSS 默认使用本机时区，通过 %d{yyyy-MM-dd hhh:mm:ss,SSS} 来自定义
    %-5level：5个占位符的日志级别，例如" info"、"error"
    %thread : 输出日志的线程
    %class : 输出日志的类的完全限定名，效率低
    %method : 输出日志的方法名
    %line : 输出日志的行号，效率低
    %msg : 日志消息内容
    %n : 换行
    -->
    <property name="LOG_PATTERN"
              value="%level %d{yyyy-MM-dd HH:mm:ss.SSS} ${env} %-5level ${PID:- } --- [%thread] %class.%method/%line : %msg%n"/>

    <!-- 彩色日志格式 -->
    <property name="LOG_PATTERN_COLOUR"
              value="${env} %date %clr(%-5level) %magenta(${PID:- }) --- [%thread] %cyan(%class.%method/%line) : %msg%n"/>


    <!--日志输出器. ch.qos.logback.core.ConsoleAppender : 输出到控制台-->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <!-- 配置日志输出格式 -->
            <pattern>${LOG_PATTERN_COLOUR}</pattern>
            <!-- 使用的字符集 -->
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- 日志输出器。ch.qos.logback.core.rolling.RollingFileAppender : 滚动输出到文件 -->
    <appender name="ROLLING" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 活动中的日志文件名(支持绝对和相对路径) -->
        <file>logs/jvwa.log</file>
        <!-- 滚动策略. ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy : 按照大小和时间滚动-->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 何时触发滚动，如何滚动，以及滚动文件的命名格式
            %d : 日期，默认格式 yyyy-MM-dd，通过 %d{yyyy-MM-dd hhh:mm:ss} 来自定义格式。logback 就是通过 %d 知道了触发滚动的时机
            %i : 单个滚动周期内的日志文件的序列号
            .zip : 将日志文件压缩成zip。不想压缩，可以使用.log 结尾
            如下每天0点以后的第一日志请求触发滚动，将前一天的日志打成 zip 压缩包存放在 logs/app1/backup 下，并命名为 app1_%d_%i.zip
            -->
            <fileNamePattern>logs/jvwa_%d{yyyy-MM-dd}_%i.zip</fileNamePattern>

            <!--单个日志文件的最大大小-->
            <maxFileSize>10MB</maxFileSize>

            <!--删除n个滚动周期之前的日志文件(最多保留前n个滚动周期的历史记录)-->
            <maxHistory>30</maxHistory>
            <!-- 在有 maxHistory 的限制下，进一步限制所有日志文件大小之和的上限，超过则从最旧的日志开始删除-->
            <totalSizeCap>500MB</totalSizeCap>
        </rollingPolicy>
        <encoder>
            <!-- 日志输出格式 -->
            <pattern>${LOG_PATTERN}</pattern>
            <!-- 使用的字符集 -->
            <charset>UTF-8</charset>
        </encoder>
    </appender>


    <!-- 非 pord 环境下使用以下配置 -->
    <springProfile name="!prod">
        <!-- 记录器 name : 包名或类名， level : 要记录的日志的起始级别， additivity : 是否追加父类的 appender -->
        <logger name="cn.yeshaoting.jvwa" level="debug" additivity="false">
            <appender-ref ref="STDOUT"/>
            <appender-ref ref="ROLLING"/>
        </logger>
    </springProfile>


    <!-- 根记录器 -->
    <root level="info">
        <!-- 使用 STDOUT、ROLLING 输出记录的日志-->
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="ROLLING"/>
    </root>
</configuration>


        <!--<?xml version="1.0" encoding="UTF-8"?>-->
        <!--<configuration>-->
        <!--<property name="LOG_FILE" value="./logs/jvwa.log}"/>-->
        <!--<property name="LOG_PATTERN"  value="%level %d{yyyy-MM-dd HH:mm:ss.SSS} %X{LOG_ID:-_} [%t] [%C{0}:%M:%L] %X{HOST_IP:-_} %X{CLUSTER:-_} %m%n%rEx"/>-->

        <!--<appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">-->
        <!--<encoder>-->
        <!--<pattern>${LOG_PATTERN}</pattern>-->
        <!--<charset>utf8</charset>-->
        <!--</encoder>-->
        <!--</appender>-->


        <!--<appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">-->
        <!--<encoder>-->
        <!--<pattern>${LOG_PATTERN}</pattern>-->
        <!--</encoder>-->
        <!--<file>${LOG_FILE}</file>-->
        <!--<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
        <!--&lt;!&ndash; daily rollover &ndash;&gt;-->
        <!--<fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd_HH}</fileNamePattern>-->
        <!--</rollingPolicy>-->
        <!--</appender>-->

        <!--&lt;!&ndash; 异步输出 &ndash;&gt;-->
        <!--<appender name="ASYNC_ROLLING_FILE" class="ch.qos.logback.classic.AsyncAppender">-->
        <!--&lt;!&ndash; 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 &ndash;&gt;-->
        <!--<discardingThreshold>0</discardingThreshold>-->
        <!--&lt;!&ndash; 更改默认的队列的深度,该值会影响性能.默认值为256 &ndash;&gt;-->
        <!--<queueSize>512</queueSize>-->
        <!--&lt;!&ndash;耗费性能  默认不开启&ndash;&gt;-->
        <!--<includeCallerData>true</includeCallerData>-->
        <!--&lt;!&ndash; 添加附加的appender,最多只能添加一个 &ndash;&gt;-->
        <!--<appender-ref ref="FILE"/>-->
        <!--</appender>-->

        <!--&lt;!&ndash;<appender name="AGENT" class="com.bytedance.logback.agent.LogbackAgentAppender">&ndash;&gt;-->
        <!--&lt;!&ndash;<pattern>${LOG_PATTERN}</pattern>&ndash;&gt;-->
        <!--&lt;!&ndash;</appender>&ndash;&gt;-->


        <!--&lt;!&ndash; project default level &ndash;&gt;-->
        <!--<logger name="com.yeshaoting.jvwa" level="INFO"/>-->
        <!--<logger name="org.apache" level="INFO" />-->
        <!--<logger name="org.apache.http.wire" level="INFO" />-->

        <!--<root level="INFO">-->
        <!--<appender-ref ref="CONSOLE"/>-->
        <!--<appender-ref ref="ASYNC_ROLLING_FILE"/>-->
        <!--<appender-ref ref="AGENT"/>-->
        <!--</root>-->

        <!--</configuration>-->
